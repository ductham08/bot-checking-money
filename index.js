import express from "express";
import 'dotenv/config';
import cors from "cors";
import TelegramBot from 'node-telegram-bot-api';
import fs from "fs";
import path from "path"; // Th√™m module path
import moment from "moment"; // Th√™m th∆∞ vi·ªán moment ƒë·ªÉ x·ª≠ l√Ω th·ªùi gian
import { fileURLToPath } from 'url'; // Th√™m ƒë·ªÉ chuy·ªÉn ƒë·ªïi URL sang ƒë∆∞·ªùng d·∫´n file
import { dirname } from 'path'; // Th√™m ƒë·ªÉ l·∫•y t√™n th∆∞ m·ª•c cha
import axios from "axios";

const __filename = fileURLToPath(import.meta.url); // L·∫•y ƒë∆∞·ªùng d·∫´n t·ªáp hi·ªán t·∫°i
const __dirname = dirname(__filename); // L·∫•y th∆∞ m·ª•c ch·ª©a t·ªáp hi·ªán t·∫°i
const logFilePath = path.join(__dirname, 'expenses.txt'); // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file log

const app = express();
app.use(cors('*'));
app.use(express.json());

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

bot.setMyCommands([
    { command: 'start', description: 'ü§ñ B·∫Øt ƒë·∫ßu ghi l·∫°i c√°c kho·∫£n chi ti√™u.' },
    { command: 'out', description: 'ü§ñ Kho·∫£n ti·ªÅn chi ti√™u.' },
    { command: 'in', description: 'ü§ñ Kho·∫£n ti·ªÅn thu v·ªÅ.' },
    { command: 'now', description: 'ü§ñ D·ªØ li·ªáu chi ti√™u trong ng√†y cho t·ªõi hi·ªán t·∫°i.' },
    { command: 'day', description: 'ü§ñ D·ªØ li·ªáu chi ti√™u c·ªßa m·ªôt ng√†y c·ª• th·ªÉ.' },
    { command: 'month', description: 'ü§ñ Th·ªëng k√™ chi ti·∫øt chi ti√™u c·ªßa th√°ng c·ª• th·ªÉ.' },
    { command: 'clear', description: 'ü§ñ X√≥a to√†n b·ªô giao d·ªãch c·ªßa 1 ng√†y c·ª• th·ªÉ.' },
    { command: 'clearlogs', description: 'ü§ñ X√≥a to√†n b·ªô giao d·ªãch t·ª´ng ƒë∆∞·ª£c ghi l·∫°i.' },
    { command: 'export', description: 'ü§ñ L·∫•y b·∫£n ghi to√†n b·ªô giao d·ªãch.' },
]);

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userFirstName = msg.from.first_name;
    bot.sendMessage(chatId, `${userFirstName}, Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot Money Connection, gi√∫p b·∫°n ghi l·∫°i v√† theo d√µi thu chi c√° nh√¢n!`);
});

const dateRecord = moment().format('DD/MM/YYYY HH:mm');

// CREATE LOG RECORD
const logToFile = (amount, description, status) => {
    // Get time now
    const logEntry = `\r\n${dateRecord} | ${amount} | ${description} | ${status}`;
    fs.appendFile(logFilePath, logEntry, (err) => {
        if (err) throw err;
        console.log('Create logs success!');
    });
};

// REMOVE REOCORD OLD
const cleanOldLogs = () => {
    fs.readFile(logFilePath, 'utf8', (err, data) => {
        if (err) throw err;

        const lines = data.split(/[\r\n]+/);
        const currentDate = moment();

        const newLines = lines.filter(line => {
            if (line.trim() === '') return false;
            const datePart = line.split(' - ')[0];
            const logDate = moment(datePart, 'DD/MM HH:mm');
            return logDate.isAfter(currentDate.subtract(6, 'months'));
        });

        fs.writeFile(logFilePath, newLines.join('\n'), (err) => {
            if (err) throw err;
            console.log('Clear logs out date success!');
        });
    });
};

// MONEY IN
bot.onText(/\/in (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const commandContent = match[1];

    let [amount, description] = commandContent.split(/[\|,]/).map(str => str.trim());

    if (amount.includes('m')) {
        amount = parseFloat(amount.replace('m', '')) * 1000000;
    }
    else if (amount.includes('k')) {
        amount = parseFloat(amount.replace('k', '')) * 1000;
    } else {
        amount = parseFloat(amount) ;
    }
    amount = `${amount.toLocaleString('vi-VN')} ƒë`;

    if (amount && description) {
        try {
            logToFile(amount, description, 'in');
            bot.sendMessage(chatId, 
                `<i>ƒê√£ ghi nh·∫≠n giao d·ªãch m·ªõi:</i>\n----------------------\nTr·ªã gi√°: <code>${amount}</code>\nN·ªôi dung: <code>${description}</code>\n----------------------\nLo·∫°i giao d·ªãch: <code>Thu v·ªÅ</code>\n`, 
                { parse_mode: 'HTML' }
            );
            console.log(process.env.URL_WEBHOOK_MONEY_IN);
            
            if (process.env.URL_WEBHOOK_MONEY_IN) {
                const url = new URL(process.env.URL_WEBHOOK_MONEY_IN);
                
                url.searchParams.append('Gi√° tr·ªã', amount ? amount : '');
                url.searchParams.append('N·ªôi dung', description ? description : '');
                url.searchParams.append('Ng√†y', dateRecord);
                
                axios.get(url)
                    .then(response => {
                        bot.sendMessage(chatId, '‚úÖ Th√™m d·ªØ li·ªáu v√†o Sheet th√†nh c√¥ng.');
                    })
                    .catch(err => {
                        bot.sendMessage(chatId, '‚ùå Th√™m v√†o Google Sheet kh√¥ng th√†nh c√¥ng.');
                    });
            }
            cleanOldLogs();
        } catch (error) {
            bot.sendMessage(chatId, 'C√≥ l·ªói x·∫£y ra khi ghi v√†o file. Vui l√≤ng th·ª≠ l·∫°i.');
            console.error('L·ªói khi ghi v√†o file:', error);
        }
    } else {
        bot.sendMessage(chatId, 'Xin l·ªói, c√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo d·∫°ng "/in s·ªë ti·ªÅn | n·ªôi dung".');
    }
});

// MONEY OUT
bot.onText(/\/out (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const commandContent = match[1];

    let [amount, description] = commandContent.split(/[\|,]/).map(str => str.trim());

    if (amount.includes('m')) {
        amount = parseFloat(amount.replace('m', '')) * 1000000;
    }
    else if (amount.includes('k')) {
        amount = parseFloat(amount.replace('k', '')) * 1000;
    } else {
        amount = parseFloat(amount) ;
    }
    amount = `${amount.toLocaleString('vi-VN')} ƒë`;

    if (amount && description) {
        try {
            logToFile(amount, description, 'out');
            bot.sendMessage(chatId, 
                `<i>ƒê√£ ghi nh·∫≠n giao d·ªãch m·ªõi:</i>\n----------------------\nTr·ªã gi√°: <code>${amount}</code>\nN·ªôi dung: <code>${description}</code>\n----------------------\nLo·∫°i giao d·ªãch: <code>Chi ra</code>\n`, 
                { parse_mode: 'HTML' }
            );
            cleanOldLogs();
            console.log(process.env.URL_WEBHOOK_MONEY_OUT);
            
            if (process.env.URL_WEBHOOK_MONEY_OUT) {
                const url = new URL(process.env.URL_WEBHOOK_MONEY_OUT);
    
                url.searchParams.append('Gi√° tr·ªã', amount ? amount : '');
                url.searchParams.append('N·ªôi dung', description ? description : '');
                url.searchParams.append('Ng√†y', dateRecord);
    
                axios.get(url)
                    .then(response => {
                        bot.sendMessage(chatId, '‚úÖ Th√™m d·ªØ li·ªáu v√†o Sheet th√†nh c√¥ng.');
                    })
                    .catch(err => {
                        bot.sendMessage(chatId, '‚ùå Th√™m v√†o Google Sheet kh√¥ng th√†nh c√¥ng.');
                    });
            }
        } catch (error) {
            bot.sendMessage(chatId, 'C√≥ l·ªói x·∫£y ra khi ghi v√†o file. Vui l√≤ng th·ª≠ l·∫°i.');
            console.error('L·ªói khi ghi v√†o file:', error);
        }
    } else {
        bot.sendMessage(chatId, 'Xin l·ªói, c√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p theo d·∫°ng "/out s·ªë ti·ªÅn | n·ªôi dung".');
    }
});

// GET MONEY TO NOW
bot.onText(/\/now/, (msg) => {
    const chatId = msg.chat.id;
    const startOfDay = moment().startOf('day');

    fs.readFile(logFilePath, 'utf8', (err, data) => {
        if (err) throw err;
        let totalIncome = 0;
        let totalExpense = 0;

        const lines = data.split(/[\r\n]+/);
        console.log(lines);

        lines.forEach(line => {
            if (line.trim() === '') return;

            const parts = line.split(' | ');
            if (parts.length < 4) return;

            const [datePart, amount, description, status] = parts;
            const logDate = moment(datePart, 'DD/MM HH:mm');

            if (logDate.isAfter(startOfDay) && logDate.isBefore(moment())) {
                let amountValue = parseFloat(amount.replace(/\./g, '').replace(/ ƒë/g, ''));

                if (status.trim() === 'in') {
                    totalIncome += amountValue;
                } else if (status.trim() === 'out') {
                    totalExpense += amountValue;
                }
            }
        });

        bot.sendMessage(chatId, 
            `<i>Th·ªëng k√™ chi ti√™u:</i>\n----------------------\nT·ªïng thu nh·∫≠p: <code>${totalIncome.toLocaleString('vi-VN')}ƒë</code>\nT·ªïng chi ti√™u: <code>${totalExpense.toLocaleString('vi-VN')}ƒë</code>`, 
            { parse_mode: 'HTML' }
        );
    });
});

// GET RECORD DAY
bot.onText(/\/day (\d{1,2})\/(\d{1,2})/, (msg, match) => {
    const chatId = msg.chat.id;
    const day = parseInt(match[1], 10);
    const month = parseInt(match[2], 10);
    const year = moment().year();
    const selectedDate = moment(`${year}-${month}-${day}`, 'YYYY-MM-DD');

    const threeMonthsAgo = moment().subtract(3, 'months');
    if (selectedDate.isBefore(threeMonthsAgo)) {
        bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho ng√†y qu√° 3 th√°ng tr∆∞·ªõc.');
        return;
    }

    fs.readFile(logFilePath, 'utf8', (err, data) => {
        if (err) throw err;
        let totalIncome = 0;
        let totalExpense = 0;
        let transactionList = [];

        const lines = data.split(/[\r\n]+/);

        lines.forEach(line => {
            if (line.trim() === '') return;

            const parts = line.split(' | ');
            if (parts.length < 4) return;

            const [datePart, amount, description, status] = parts;
            const logDate = moment(datePart, 'DD/MM HH:mm');

            if (logDate.isSame(selectedDate, 'day')) {
                let amountValue = parseFloat(amount.replace(/\./g, '').replace(/ ƒë/g, ''));

                transactionList.push(`${logDate.format('HH:mm')} | ${amount} | ${description} | ${status}`);

                if (status.trim() === 'in') {
                    totalIncome += amountValue;
                } else if (status.trim() === 'out') {
                    totalExpense += amountValue;
                }
            }
        });

        const transactionSummary = transactionList.length > 0 ? transactionList.join('\n') : 'Kh√¥ng c√≥ giao d·ªãch n√†o.';

        bot.sendMessage(chatId, 
            `<i>Th·ªëng k√™ cho ng√†y ${day}/${month}:</i>\n----------------------\n${transactionSummary}\n----------------------\nT·ªïng thu nh·∫≠p: <code>${totalIncome.toLocaleString('vi-VN')}ƒë</code>\nT·ªïng chi ti√™u: <code>${totalExpense.toLocaleString('vi-VN')}ƒë</code>\n`, 
            { parse_mode: 'HTML' }
        );
    });
});

// CLEAR RECORD IN DAY
bot.onText(/\/clear (\d{1,2})\/(\d{1,2})/, (msg, match) => {
    const chatId = msg.chat.id;
    const day = match[1].padStart(2, '0');
    const month = match[2].padStart(2, '0');

    const specifiedDate = moment(`${day}/${month}`, 'DD/MM');

    const startOfSpecifiedDate = specifiedDate.clone().startOf('day');
    const endOfSpecifiedDate = specifiedDate.clone().endOf('day');

    fs.readFile(logFilePath, 'utf8', (err, data) => {
        if (err) throw err;

        const lines = data.split(/\r\n/);
        const newLogEntries = [];

        lines.forEach(line => {
            if (line.trim() === '') return;

            const parts = line.split(' | ');
            if (parts.length < 4) return;

            const [datePart] = parts;
            const logDate = moment(datePart, 'DD/MM HH:mm');

            if (logDate.isBefore(startOfSpecifiedDate) || logDate.isAfter(endOfSpecifiedDate)) {
                newLogEntries.push(line);
            }
        });

        fs.writeFile(logFilePath, newLogEntries.join('\r\n') + '\r\n', (err) => {
            if (err) throw err;
            bot.sendMessage(chatId, `ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch trong ng√†y <code>${day}/${month}.</code>`,{ parse_mode: 'HTML' });
        });
    });
});

// EXPORT FILE
bot.onText(/\/export/, (msg) => {
    const chatId = msg.chat.id;

    bot.sendDocument(chatId, logFilePath)
        .then(() => {
            console.log('Send file to user success');
        })
        .catch(err => {
            bot.sendMessage(chatId, 'C√≥ l·ªói x·∫£y ra khi g·ª≠i file log. Xin th·ª≠ l·∫°i sau.');
        });
});

// LOGS MONTH
bot.onText(/\/month (\d{2})/, (msg, match) => {
    const chatId = msg.chat.id;
    const month = parseInt(match[1], 10);

    fs.readFile(logFilePath, 'utf8', (err, data) => {
        if (err) {
            console.error('C√≥ l·ªói khi ƒë·ªçc file log:', err);
            bot.sendMessage(chatId, 'C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file log.');
            return;
        }

        let totalIncome = 0;
        let totalExpense = 0;
        let dailySummary = {};
        
        const lines = data.split(/[\r\n]+/);

        lines.forEach(line => {
            if (line.trim() === '') return;

            const parts = line.split(' | ');
            if (parts.length < 4) return;

            const [datePart, amount, description, status] = parts;
            const logDate = moment(datePart, 'DD/MM HH:mm');

            if (logDate.month() + 1 === month && logDate.isAfter(moment().subtract(6, 'months'))) {
                let amountValue = parseFloat(amount.replace(/\./g, '').replace(/ ƒë/g, ''));

                const day = logDate.format('DD/MM/YYYY');
                if (!dailySummary[day]) {
                    dailySummary[day] = { income: 0, expense: 0 };
                }

                if (status.trim() === 'in') {
                    totalIncome += amountValue;
                    dailySummary[day].income += amountValue;
                } else if (status.trim() === 'out') {
                    totalExpense += amountValue;
                    dailySummary[day].expense += amountValue;
                }
            }
        });

        let message = `<i>Th·ªëng k√™ thu chi th√°ng ${month}:</i>\n----------------------\n`;
        Object.keys(dailySummary).forEach(day => {
            const { income, expense } = dailySummary[day];
            message += `<b>${day}</b>:\nThu: <code>${income.toLocaleString('vi-VN')} ƒë</code>\nChi: <code>${expense.toLocaleString('vi-VN')} ƒë</code>\n`;
        });

        message += `\n----------------------\nT·ªïng thu nh·∫≠p: <code>${totalIncome.toLocaleString('vi-VN')} ƒë</code>\nT·ªïng chi ti√™u: <code>${totalExpense.toLocaleString('vi-VN')} ƒë</code>`;

        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    });
});

// STOP BOT AND CLEAR ALL LOGS
bot.onText(/\/clearlogs/, (msg) => {
    const chatId = msg.chat.id;

    fs.truncate(logFilePath, 0, (err) => {
        if (err) {
            bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ x√≥a file logs.');
            throw err;
        }
        bot.sendMessage(chatId, 'To√†n b·ªô l·ªãch s·ª≠ giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.');
    });
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    if (!msg.text.startsWith('/')) {
        bot.sendMessage(chatId, 'C√¢u l·ªánh kh√¥ng ph√π h·ª£p, vui l√≤ng b·∫Øt ƒë·∫ßu b·ªüi k√Ω t·ª± "/".');
    }
});

app.listen(process.env.PORT, () => {
    console.log(`Server listening port ${process.env.PORT}`);
});
